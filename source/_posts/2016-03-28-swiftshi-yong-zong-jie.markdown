---
layout: post
title: "swift使用小结"
date: 2016-03-28 19:13:17 +0800
comments: true
categories:
- iOS
- swift
tags:
- swift
---

目前为止swift已经到2.0版本了，使用swift来开发移动端项目已经成熟，现在很多的开源项目已经放弃Objective-C，转向swift，所以我也使用swift来做了一个新的小项目。现在来谈谈使用swift的感受。

<!--more-->

### 语法

swift不仅仅比OC更加的简洁，而且更加的容易看懂，同时在错误的控制上更加严谨，可以说是一门非常优秀的强类型面向对象语言。同时也比较类似Python，拥有脚本语言的部分特性。

同时api和OC几乎完全一样，这样也减少了很多学习的成本，当然一些新的思想还是要重新学习。

swift和OC混编也非常的简单，只要没有使用一些特殊方法的类库都可以无缝混编。(比如JSONObject这个类库使用了动态获取属性名，导致不能判断swift的属性)

### 新特性
这里稍微列几个，如果你了解一些其他语言，那么你会感到非常的亲切。

#### 空判断
swift里面对象的类型可以分为`Object`和`Optional<Object>`两种类型，这样可以明确知道对象是否可以为空，同时使用`?`来处理Optional类型的调用，这样我们就不需要经常的使用if和断言了。

#### 强类型
swift强制类型比OC更加的严格，类型判断用`is`，类型转换使用`as`。

#### 泛型
也算是强类型的一部分，这样我们终于不用猜测Array和Dictionary里面存的对象是什么类型的了。

#### 操作符重载
从某些特定的角度看，这是一个非常有用的特性，但过度使用也会让代码更加难以理解。String终于支持`+`的操作了，终于告别OC里面让人奔溃的字符串连接。

#### enum
swift允许枚举类型的对象“携带”其他的数据，这在某些情境下是非常便利的一个特性，但也让人一下子难以理解。



### 闭包

相对应于OC里面的block，闭包更加的简洁与好用，有些时候不仅可以使用简化的闭包，甚至简单到省略了`()`和参数。

```swift
exe {
	show($0)
}

exe() {
	show($0)
}

exe({
	show($0)
})

exe({ a in
	show(a)
})

exe({ (a:String)->Void in
	show(a)
})
```
以上的表述都是完全一样的。

### defer & guard

算是一个锦上添花的东西吧，`defer`是函数返回前的调用，`guard`和`if`的作用是相同的，仅仅作为语义区分吧。

```swift
let x = open("file")
defer {
	close(x)
}
```
